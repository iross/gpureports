#!/usr/bin/env python3
"""
Simple HTTP server for hosting GPU monitoring websites.

A minimal static file server that can serve the websites generated by
gpu_website_generator.py. Perfect for containerized deployments.
"""

import http.server
import socketserver
import argparse
import sys
from pathlib import Path
import os


class QuietHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    """HTTP request handler with less verbose logging."""
    
    def log_message(self, format, *args):
        """Override to reduce log verbosity."""
        # Only log errors, not every request
        if args and args[0].startswith(('4', '5')):
            super().log_message(format, *args)


def main():
    """Run the HTTP server."""
    parser = argparse.ArgumentParser(description='Simple HTTP server for GPU monitoring websites')
    parser.add_argument('--port', '-p', type=int, default=8000, 
                       help='Port to serve on (default: 8000)')
    parser.add_argument('--host', '-H', type=str, default='0.0.0.0',
                       help='Host to bind to (default: 0.0.0.0)')
    parser.add_argument('--directory', '-d', type=str, default='.',
                       help='Directory to serve (default: current directory)')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Enable verbose logging')
    
    args = parser.parse_args()
    
    # Change to the specified directory
    serve_dir = Path(args.directory).resolve()
    if not serve_dir.exists():
        print(f"Error: Directory {serve_dir} does not exist")
        sys.exit(1)
    
    os.chdir(serve_dir)
    
    # Choose handler based on verbosity
    handler_class = http.server.SimpleHTTPRequestHandler if args.verbose else QuietHTTPRequestHandler
    
    # Create server
    try:
        with socketserver.TCPServer((args.host, args.port), handler_class) as httpd:
            print(f"üåê Serving GPU monitoring website at http://{args.host}:{args.port}")
            print(f"üìÅ Serving directory: {serve_dir}")
            print(f"üîó Open: http://localhost:{args.port}")
            print("Press Ctrl+C to stop the server")
            
            httpd.serve_forever()
            
    except KeyboardInterrupt:
        print("\nüëã Server stopped")
    except OSError as e:
        if e.errno == 98:  # Address already in use
            print(f"‚ùå Error: Port {args.port} is already in use")
            print(f"   Try a different port with --port <number>")
        else:
            print(f"‚ùå Error starting server: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()